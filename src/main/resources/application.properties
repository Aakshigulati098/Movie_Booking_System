server.port=9090
spring.application.name=movie_booking_system

spring.data.redis.host=redis-13903.crce179.ap-south-1-1.ec2.redns.redis-cloud.com
spring.data.redis.port=13903
spring.data.redis.password=dFrZjJbslxmNwnuatHuSKy57GNZrze1t
spring.data.redis.ssl.enabled=false
logging.level.org.springframework.data.redis=DEBUG

#spring.data.redis.host=localhost
#spring.data.redis.port=6379
#spring.data.redis.password=        # leave blank if no password set
#spring.data.redis.ssl.enabled=false
#logging.level.org.springframework.data.redis=DEBUG


#make changes according to postgres
#<<<<<<< HEAD
#spring.datasource.url=jdbc:mysql://localhost:3306/moviebooking
#spring.datasource.username=root
#spring.datasource.password=root
#
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#=======
#spring.datasource.url=jdbc:mysql://localhost:3306/moviebooking
#spring.datasource.username=root
#spring.datasource.password=root
#
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#>>>>>>> origin/Interface_Abir
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#
#spring.jpa.show-sql=true
spring.jpa.generate-ddl=true

#spring.application.name=EmailTest
#Email Configurations :
spring.mail.host=smtp.gmail.com
spring.mail.port=587

spring.mail.username=ashirvadpandey123@gmail.com
spring.mail.password=rwhgymovuroefwnx

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

rapidapi.key=7212dbf914msh76fa4a7388d69c2p11e75ajsn1662dea6b373

jwt.secret=YourVeryLongAndSecureSecretKeyThatIsSafeAndUniqueToYourApplication
jwt.expiration=86400000  # 24 hours in milliseconds

spring.datasource.url=jdbc:postgresql://ep-plain-shadow-a52nf5uo-pooler.us-east-2.aws.neon.tech:5432/neondb?sslmode=require
spring.datasource.username=neondb_owner
spring.datasource.password=npg_emiHbopV58aF
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect



spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=auction-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all


spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.movie_booking_system.dto

# Custom properties
auction.kafka.topic.expired=auction.end